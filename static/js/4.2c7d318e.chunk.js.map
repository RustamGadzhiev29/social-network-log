{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessagesByForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","withAuthRedirect","Component","this","props","isAuth","to","React","DialogItem","id","className","classes","dialog","name","photoAva","src","Message","container","messageblue","message","messagetimestampleft","maxLength50","maxLengthCreator","MessagesReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","myButton","Dialogs","state","dialogsPage","newDialogs","dialogs","map","key","newDialogsMessages","messages","dialogsAll","value","addMessageCreator","newMessageText","compose","connect","auth","dispatch"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,SAAW,0BAA0B,SAAW,0BAA0B,YAAc,6BAA6B,eAAiB,gCAAgC,sBAAwB,uCAAuC,qBAAuB,wC,+HCGhbC,EAAmB,SAACC,GAQ7B,OARgD,uKAGxC,OAAKC,KAAKC,MAAMC,OACT,kBAACH,EAAcC,KAAKC,OADI,kBAAC,IAAD,CAAUE,GAAG,eAHJ,GAChBC,IAAML,a,8FCiB3BM,EAbI,SAACJ,GACQA,EAAMK,GAC9B,OACI,yBAAKC,UAAWC,IAAQC,QACpB,kBAAC,IAAD,CAASF,UAAWC,IAAQE,KAAMP,GAAI,YAAcF,EAAMK,IACtD,yBAAKC,UAAWC,IAAQG,SACnBC,IAAI,wHAERX,EAAMS,QCKRG,EAfC,SAACZ,GAEf,OACE,yBAAKM,UAAWC,IAAQM,WACtB,yBAAKP,UAAWC,IAAQO,aACtB,yBAAKR,UAAWC,IAAQQ,SAAUf,EAAMe,SAExC,yBAAKT,UAAWC,IAAQS,sBAAxB,Y,kCCHFC,EAAcC,YAAiB,KAoBxBC,EAAoBC,YAAwB,CAACC,KAAK,wBAA9BD,EAnB8B,SAACpB,GAE5D,OAAQ,0BAAMsB,SAAUtB,EAAMuB,cACtB,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAa,UACbhB,KAAM,iBACNiB,UAAWC,IACXC,SAAU,CAACC,IAAUZ,KAKzB,4BAAQX,UAAWC,IAAQuB,UAA3B,iBCqCDC,EAlCC,SAAC/B,GAEb,IAAIgC,EAAQhC,EAAMiC,YAEdC,EAAaF,EAAMG,QAAQC,KAAI,SAAC5B,GAChC,OAAO,kBAAC,EAAD,CAAYC,KAAMD,EAAOC,KAAMJ,GAAIG,EAAOH,GAAIgC,IAAK7B,EAAOH,QAEjEiC,EAAqBN,EAAMO,SAASH,KAAI,SAACrB,GAAD,OACxC,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASsB,IAAKtB,EAAQV,QASpD,OACI,yBAAKC,UAAWC,IAAQiC,YAEpB,yBAAKlC,UAAWC,IAAQ4B,SAAUD,GAElC,yBAAK5B,UAAWC,IAAQgC,UACpB,kBAACpB,EAAD,CAAmBG,SAXT,SAACmB,GAEnBzC,EAAM0C,kBAAkBD,EAAME,oBAc1B,yBAAKrC,UAAWC,IAAQgC,UAAWD,K,yBC2DhCM,sBAEXC,aAxCkB,SAACb,GAGnB,MAAO,CACHC,YAAaD,EAAMC,YACnBhC,OAAQ+B,EAAMc,KAAK7C,WAWF,SAAC8C,GAEtB,MAAO,CAIHL,kBAAmB,SAACC,GAChBI,EAASL,YAAkBC,SAkBnC9C,IAHW+C,CAKbb","file":"static/js/4.2c7d318e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsAll\":\"Dialogs_dialogsAll__aQu-U\",\"dialogs\":\"Dialogs_dialogs__12Mme\",\"dialog\":\"Dialogs_dialog__1AmBl\",\"name\":\"Dialogs_name__1dXUw\",\"messages\":\"Dialogs_messages__3KI7F\",\"photoAva\":\"Dialogs_photoAva__2g7wY\",\"myButton\":\"Dialogs_myButton__3tBBP\",\"messageblue\":\"Dialogs_messageblue__3v4E-\",\"messagecontent\":\"Dialogs_messagecontent__2lPKt\",\"messagetimestampright\":\"Dialogs_messagetimestampright__2sT34\",\"messagetimestampleft\":\"Dialogs_messagetimestampleft__AAbYG\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\n\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return RedirectComponent\r\n}","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsItemType = {\r\n    name: string;\r\n    id: number;\r\n};\r\n\r\nconst DialogItem = (props: DialogsItemType) => {\r\n    let path = \"/dialogs\" + props.id;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink className={classes.name} to={\"/dialogs/\" + props.id}>\r\n                <img className={classes.photoAva}\r\n                     src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS4bkPT14o4_n_lnU-3DNyZol1LE0vParolHN-kXQTD8exgO4-8&usqp=CAU\">\r\n                </img>\r\n                {props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\ntype DialogsMessagesType = {\r\n  message: string;\r\n};\r\n\r\nconst Message = (props: DialogsMessagesType) => {\r\n\r\n  return(\r\n    <div className={classes.container}>\r\n      <div className={classes.messageblue}>\r\n        <div className={classes.message}>{props.message}</div>\r\n          {/*<button>Del</button>*/}\r\n        <div className={classes.messagetimestampleft}>17:15</div>\r\n      </div>\r\n    </div>\r\n\r\n)\r\n\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport classes from \"./Dialogs.module.css\";\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(100)\r\nconst MessagesForm:React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\r\n\r\n    return (<form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'message'}\r\n                    name={'newMessageText'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                >\r\n                </Field>\r\n\r\n\r\n                <button className={classes.myButton}>Add post</button>\r\n            </div>\r\n    </form>\r\n   )\r\n}\r\n\r\nexport const MessagesReduxForm = reduxForm<FormDataType>({form:'dialogAddMessageForm'})(MessagesForm)\r\n\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\n\r\nimport {MessagesReduxForm} from \"./MessagesByForm\";\r\nimport {dialogsTypeState} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\nexport type dialogsDataType = {\r\n    id: number;\r\n    name: string;\r\n};\r\nexport type dialogsMessagesDataType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\n\r\ntype dialogsAndMessagesType = {\r\n    updateNewMessageText: (text: string) => void\r\n    addMessageCreator: () => void\r\n    dialogsPage: dialogsTypeState\r\n    updateNEwMessageTextCreator: (text: string) => void\r\n    isAuth: boolean\r\n};\r\n\r\nconst Dialogs = (props: any) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let newDialogs = state.dialogs.map((dialog: dialogsDataType) => {\r\n        return <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>;\r\n    });\r\n    let newDialogsMessages = state.messages.map((message: dialogsMessagesDataType) => (\r\n        <Message message={message.message} key={message.id}/>\r\n    ));\r\n\r\n\r\n    const addNewMessage = (value: any) => {\r\n\r\n        props.addMessageCreator(value.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogsAll}>\r\n\r\n            <div className={classes.dialogs}>{newDialogs}</div>\r\n\r\n            <div className={classes.messages}>\r\n                <MessagesReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n\r\n\r\n            <div className={classes.messages}>{newDialogsMessages}</div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","// import React from \"react\";\r\n// import {addMessageCreator, updateNEwMessageTextCreator, DialogsActionType} from \"../../redux/dialogs-reducer\"\r\n// import Dialogs from \"./Dialogs\";\r\n// import {connect, ConnectedComponent} from \"react-redux\";\r\n// import {Redirect} from \"react-router\";\r\n//\r\n//\r\n// export type dialogsDataType = {\r\n//     id: number;\r\n//     name: string;\r\n// };\r\n// export type dialogsMessagesDataType = {\r\n//     id: number;\r\n//     message: string;\r\n// };\r\n//\r\n// class DialogsContainer extends React.Component<any, any> {\r\n//     componentDidMount() {\r\n//     }\r\n//\r\n//     render() {\r\n//         if (this.props.isAuth == false)return <Redirect to='/login'/>\r\n//         return <Dialogs isAuth={this.props.isAuth}\r\n//                         addMessageCreator={this.props.addMessageCreator}\r\n//                         dialogsPage={this.props.dialogsPage}\r\n//                         updateNewMessageText={this.props.updateNewMessageText}\r\n//                         updateNEwMessageTextCreator={this.props.updateNEwMessageTextCreator} />\r\n//     }\r\n// }\r\n//\r\n// let mapDispatchToProps = (dispatch:(action: DialogsActionType) => void) => {//а тут колбэки которые м ыбудем отправлять\r\n//     // в нашу презентационную компоненту\r\n//     return {\r\n//         updateNEwMessageTextCreator:(text: string)=>{\r\n//             dispatch(updateNEwMessageTextCreator(text));\r\n//         },\r\n//         addMessageCreator:()=>{\r\n//             dispatch(addMessageCreator())\r\n//         }\r\n//     }\r\n// }\r\n//\r\n//\r\n// let mapStateToProps = (state:any) => {//в нашем первом объекте мы\r\n//     // берем данные из STATE, смысл этой функции замапить стейт на\r\n//     // пропсы и превратить чать стейта в пропсы\r\n//     return {\r\n//         dialogsPage: state.dialogsPage,\r\n//         isAuth: state.auth.isAuth\r\n//     }\r\n// }\r\n//\r\n//\r\n// export default connect(mapStateToProps,mapDispatchToProps)(Dialogs);\r\n//\r\n//\r\n\r\n\r\n/////старая версия******************//////////\r\nimport React from \"react\";\r\nimport {addMessageCreator, DialogsActionType} from \"../../redux/dialogs-reducer\"\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect, ConnectedComponent} from \"react-redux\";\r\nimport {Redirect} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nexport type dialogsDataType = {\r\n    id: number;\r\n    name: string;\r\n};\r\nexport type dialogsMessagesDataType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nlet mapStateToProps = (state: any) => {//в нашем первом объекте мы\r\n    // берем данные из STATE, смысл этой функции замапить стейт на\r\n    // пропсы и превратить чать стейта в пропсы\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapStateToPropsForRedirect = (state: any) => {//в нашем первом объекте мы\r\n    // берем данные из STATE, смысл этой функции замапить стейт на\r\n    // пропсы и превратить чать стейта в пропсы\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: DialogsActionType) => void) => {//а тут колбэки которые м ыбудем отправлять\r\n    // в нашу презентационную компоненту\r\n    return {\r\n        // updateNEwMessageTextCreator: (text: string) => {\r\n        //     dispatch(updateNEwMessageTextCreator(text));\r\n        // },\r\n        addMessageCreator: (newMessageText:string) => {\r\n            dispatch(addMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent:any = withAuthRedirect(Dialogs)\r\n// AuthRedirectComponent=connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n// const DialogsContainer:ConnectedComponent<any, any> = (AuthRedirectComponent);\r\n\r\n\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n\r\n)(Dialogs);\r\n"],"sourceRoot":""}